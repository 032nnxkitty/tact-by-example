var y=Object.defineProperty;var B=(o,e,t)=>e in o?y(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var d=(o,e,t)=>(B(o,typeof e!="symbol"?e+"":e,t),t);import{S as m,i as h,s as f,I as p,ac as C}from"../chunks/index.9fe14626.js";import{d as r,g,s as l}from"../chunks/store.d3ab02ad.js";import{d as I}from"../chunks/index.78404594.js";const Q=`# Multiple Contract Instances

Instead of duplicating the code for the two contracts like in the previous example, we can write the code once and still deploy two separate instances. Each instance will have its own unique address.

We can do this by adding an argument to \`init()\`. When deploying the contract, we need to specify its init arguments. In this example we deploy twice, the first with the argument 1 and the second is deployed with 2.

We mentioned earlier that contract addresses on TON are [derived](https://docs.ton.org/learn/overviews/addresses#account-id) from the initial code of the contract (the compiled bytecode) and the initial data of the contract (the arguments of init).

Since we wrote the code once, the initial code is now identical. By adding an contructor argument, we've made the initial data different. This is why we're going to get two different addresses.`,v=`import "@stdlib/deploy";

// we're going to have multiple instances of this contract, each with a different seqno
contract Todo with Deployable {

    seqno: Int as uint64;
 
    // when deploying an instance, we must specify its index (sequence number)
    init(seqno: Int) {
        self.seqno = seqno;
    }
 
    // each instance can calculate the address of every other instance
    get fun addressOf(otherSeqno: Int): Address {
        let init: StateInit = initOf Todo(otherSeqno);
        return contractAddress(init);
    }
}`;function D(o){return e=>{let t=e;t.storeUint(2490013878,32),t.storeUint(o.queryId,64)}}function H(o){return e=>{e.storeInt(o.seqno,257)}}async function w(o){const e=r.Cell.fromBase64("te6ccgECEAEAAsoAART/APSkE/S88sgLAQIBYgIDApTQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxZ2zwwyPhDAcx/AcoAAQHLP8ntVAkEAgEgBwgBmHAh10nCH5UwINcLH94Cklt/4AGCEJRqmLa6jq3THwGCEJRqmLa68uCB0z8BMcgBghCv+Q9XWMsfyz/Jf/hCcFgDgEIBbW3bPH/gMHAFAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7AAYAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwCEb7x3tngDtnhjAkKAgEgDA0ARu1E0NQB+GPSAAGU0z8BMeD4KNcLCoMJuvLgiYEBAdcAAQHRAYz4QwHbPHBZyHABywFzAcsBcAHLABLMzMn5AMhyAcsBcAHLABLKB8v/ydAg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCICwBkAdD0BDBtAYFSNwGAEPQPb6Hy4IcBgVI3IgKAEPQXyAHI9ADJAcxwAcoAWAGBAQHPAMkAubu9GCcFzsPV0srnsehOw51kqFG2aCcJ3WNS0rZHyzItOvLf3xYjmCcCBVwBuAZ2OUzlg6rkclssOCcBvUne+VRZbxx1PT3gVZwyaCcJ2XTlqzTstzOg6WbZRm6KSAIBSA4PABGwr7tRNDSAAGAAdbJu40NWlwZnM6Ly9RbVVWMm8zZm0xb3VGOEFxaWVrSnBzekN4SkUzcE5nZWhlMUJqbVNIa1lWdVBzgg"),t=r.Cell.fromBase64("te6cckECEgEAAtQAAQHAAQEFoKRvAgEU/wD0pBP0vPLICwMCAWINBAIBIAoFAgEgCQYCAUgIBwB1sm7jQ1aXBmczovL1FtVVYybzNmbTFvdUY4QXFpZWtKcHN6Q3hKRTNwTmdlaGUxQmptU0hrWVZ1UHOCAAEbCvu1E0NIAAYAC5u70YJwXOw9XSyuex6E7DnWSoUbZoJwndY1LStkfLMi068t/fFiOYJwIFXAG4BnY5TOWDquRyWyw4JwG9Sd75VFlvHHU9PeBVnDJoJwnZdOWrNOy3M6DpZtlGbopIAhG+8d7Z4A7Z4YwRCwGM+EMB2zxwWchwAcsBcwHLAXABywASzMzJ+QDIcgHLAXABywASygfL/8nQINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAwAZAHQ9AQwbQGBUjcBgBD0D2+h8uCHAYFSNyICgBD0F8gByPQAyQHMcAHKAFgBgQEBzwDJApTQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxZ2zwwyPhDAcx/AcoAAQHLP8ntVBEOAZhwIddJwh+VMCDXCx/eApJbf+ABghCUapi2uo6t0x8BghCUapi2uvLggdM/ATHIAYIQr/kPV1jLH8s/yX/4QnBYA4BCAW1t2zx/4DBwDwHKyHEBygFQBwHKAHABygJQBSDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFlAD+gJwAcpoI26zkX+TJG6z4pczMwFwAcoA4w0hbrOcfwHKAAEgbvLQgAHMlTFwAcoA4skB+wAQAJh/AcoAyHABygBwAcoAJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4iRus51/AcoABCBu8tCAUATMljQDcAHKAOJwAcoAAn8BygACyVjMAEbtRNDUAfhj0gABlNM/ATHg+CjXCwqDCbry4ImBAQHXAAEB0S4onfc=");let n=r.beginCell();n.storeRef(t),n.storeUint(0,1),H({$$type:"Todo_init_args",seqno:o})(n);const s=n.endCell();return{code:e,data:s}}const b={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"},137:{message:"Masterchain support is not enabled for this contract"}};class A{constructor(e,t){d(this,"address");d(this,"init");d(this,"abi",{types:[{name:"StateInit",header:null,fields:[]},{name:"Context",header:null,fields:[]},{name:"SendParameters",header:null,fields:[]},{name:"Deploy",header:2490013878,fields:[]},{name:"DeployOk",header:2952335191,fields:[]}],errors:b});this.address=e,this.init=t}static async init(e){return await w(e)}static async fromInit(e){const t=await w(e),n=r.contractAddress(0,t);return new A(n,t)}static fromAddress(e){return new A(e)}async send(e,t,n,s){let a=null;if(s&&typeof s=="object"&&!(s instanceof r.Slice)&&s.$$type==="Deploy"&&(a=r.beginCell().store(D(s)).endCell()),a===null)throw new Error("Invalid message type");await e.internal(t,{...n,body:a})}async getAddressOf(e,t){let n=new r.TupleBuilder;return n.writeNumber(t),(await e.get("addressOf",n.build())).stack.readAddress()}}function E(o,e,t){let n;p(o,l,i=>t(3,n=i));let s,a;return C(l,n={markdown:Q,tactCode:v,deploy:async()=>{const i=await I.Blockchain.create(),c=await i.treasury("deployer");c.getSender(),s=i.openContract(await A.fromInit(1n)),a=i.openContract(await A.fromInit(2n));const u={[c.address.toString()]:"deployer",[s.address.toString()]:"Todo(1)",[a.address.toString()]:"Todo(2)"};return[[s,a],u,[await s.send(c.getSender(),{value:r.toNano(1)},{$$type:"Deploy",queryId:0n}),await a.send(c.getSender(),{value:r.toNano(1)},{$$type:"Deploy",queryId:0n})]]},messages:{},getters:{"addressOf(1)":async()=>await s.getAddressOf(1n),"addressOf(2)":async()=>await s.getAddressOf(2n)},prev:g(import.meta.url).prev,next:g(import.meta.url).next},n),[]}class N extends m{constructor(e){super(),h(this,e,E,null,f,{})}}export{N as default};
