import{S as A,i as m,s as p,I as w,ac as h}from"../../../../chunks/index-1d4083c1.js";import{d as a,g as c,s as g}from"../../../../chunks/helpers-e86371c8.js";import{d as C}from"../../../../chunks/index-7e0e6ef9.js";const f=`# Hello World

This is probably the simplest possible Tact program. It will provide callers with the classic output "hello world".

Tact lets you write smart contracts. This code defines a single contract named \`HelloWorld\`. Smart contracts must be deployed on-chain to be usable, try to deploy this contract by pressing the <span class="mdButton blue">Deploy</span> button.

## A simple interaction

Contracts can have _getters_ like \`greeting()\`. These are special functions that allow users to query information from the contract. Try to call the getter by pressing the <span class="mdButton teal">Get greeting</span> button.
`,y=`contract HelloWorld {

    get fun greeting(): String {
        return "Hello World";
    }
    
}`;async function d(){const o=a.Cell.fromBase64("te6ccgECCQEAAT8AART/APSkE/S88sgLAQIBYgIDAtjQAdDTAwFxsMABkX+RcOIB+kABINdJgQELuvLgiCDXCwoggwm6IYEE/7qx8uCIgwm68uCJVFBTA28E+GEC+GLtRNDUAfhj0gAwkW2Ojfgo1wsKgwm68uCJ2zziWds8MDDI+EMBzH8BygDJ7VQHBAIBIAUGAD5wIddJwh+VMCDXCx/eApJbf+ABwAAB10nBIbCRf+BwAkG9jVdqJoagD8MekAGEi2x0b8FGuFhUGE3XlwRO2ecW2eQHCAC5vd6ME4LnYerpZXPY9CdhzrJUKNs0E4TusalpWyPlmRadeW/vixHME4ECrgDcAzscpnLB1XI5LZYcE4DepO98qiy3jjqenvAqzhk0E4TsunLVmnZbmdB0s2yjN0UkAAJtABwwi7SGVsbG8gV29ybGSA=="),e=a.Cell.fromBase64("te6cckECCwEAAUkAAQHAAQEFoPYVAgEU/wD0pBP0vPLICwMCAWIIBAIBIAYFALm93owTgudh6ullc9j0J2HOslQo2zQThO6xqWlbI+WZFp15b++LEcwTgQKuANwDOxymcsHVcjktlhwTgN6k73yqLLeOOp6e8CrOGTQThOy6ctWadluZ0HSzbKM3RSQCQb2NV2omhqAPwx6QAYSLbHRvwUa4WFQYTdeXBE7Z5xbZ5AoHABwwi7SGVsbG8gV29ybGSALY0AHQ0wMBcbDAAZF/kXDiAfpAASDXSYEBC7ry4Igg1wsKIIMJuiGBBP+6sfLgiIMJuvLgiVRQUwNvBPhhAvhi7UTQ1AH4Y9IAMJFtjo34KNcLCoMJuvLgids84lnbPDAwyPhDAcx/AcoAye1UCgkAPnAh10nCH5UwINcLH94Cklt/4AHAAAHXScEhsJF/4HAAAm1XlKj1");let t=a.beginCell();t.storeRef(e),t.storeUint(0,1);const s=t.endCell();return{code:o,data:s}}const b={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"},137:{message:"Masterchain support is not enabled for this contract"}};class l{constructor(e,t){this.abi={errors:b},this.address=e,this.init=t}static async init(){return await d()}static async fromInit(){const e=await d(),t=a.contractAddress(0,e);return new l(t,e)}static fromAddress(e){return new l(e)}async send(e,t,s,n){let r=null;if(n===null&&(r=new a.Cell),r===null)throw new Error("Invalid message type");await e.internal(t,{...s,body:r})}async getGreeting(e){let t=new a.TupleBuilder;return(await e.get("greeting",t.build())).stack.readString()}}function I(o,e,t){let s;w(o,g,r=>t(2,s=r));let n;return h(g,s={markdown:f,tactCode:y,deploy:async()=>{const r=await C.Blockchain.create(),i=await r.treasury("deployer");i.getSender(),n=r.openContract(await l.fromInit());const u={[i.address.toString()]:"deployer",[n.address.toString()]:"contract"};return[n,u,[await n.send(i.getSender(),{value:a.toNano(1)},null)]]},messages:{},getters:{greeting:async()=>await n.getGreeting()},prev:c(import.meta.url).prev,next:c(import.meta.url).next},s),[]}class k extends A{constructor(e){super(),m(this,e,I,null,p,{})}}export{k as default};
