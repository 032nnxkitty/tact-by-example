import{S as u,i as m,s as A,J as w,ad as p}from"../../../chunks/index-a89a8bfe.js";import{d as r,s as i}from"../../../chunks/store-04c80bb0.js";import{d as b}from"../../../chunks/index-e79fdc6e.js";import{g}from"../../../chunks/helpers-7ef692a6.js";const h=`# Hello World

This is probably the simplest possible Tact program. It will provide callers with the classic output "hello world".

Tact lets you write smart contracts. This code defines a single contract named \`HelloWorld\`. Smart contracts must be deployed on-chain to be usable, try to deploy this contract by pressing the <span class="mdButton blue">Deploy</span> button.

## A simple interaction

Contracts can have _getters_ like \`greeting()\`. These are special functions that allow users to query information from the contract. Try to call the getter by pressing the <span class="mdButton teal">Get greeting</span> button.
`,f=`contract HelloWorld {

    get fun greeting(): String {
        return "Hello World";
    }
    
}`;async function d(){const o=r.Cell.fromBase64("te6ccgECCQEAATsAART/APSkE/S88sgLAQIBYgIDAtDQAdDTAwFxsMABkX+RcOIB+kABINdJgQELuvLgiCDXCwoggwm6IYEE/7qx8uCIgwm68uCJIkFVbwT4Ye1E0NQB+GLSADCRbY6N+CjXCwqDCbry4InbPOJZ2zwwMMj4QgHMfwHKAMntVAcEAgEgBQYAPnAh10nCH5UwINcLH94Cklt/4AHAAAHXScEhsJF/4HACQb2NV2omhqAPwxaQAYSLbHRvwUa4WFQYTdeXBE7Z5xbZ5AcIALm93owTgudh6ullc9j0J2HOslQo2zQThO6xqWlbI+WZFp15b++LEcwTgQKuANwDOxymcsHVcjktlhwTgN6k73yqLLeOOp6e8CrOGTQThOy6ctWadluZ0HSzbKM3RSQAAm0AHDCLtIZWxsbyBXb3JsZI"),e=r.Cell.fromBase64("te6cckECCwEAAUUAAQHAAQEFoPYVAgEU/wD0pBP0vPLICwMCAWIIBAIBIAYFALm93owTgudh6ullc9j0J2HOslQo2zQThO6xqWlbI+WZFp15b++LEcwTgQKuANwDOxymcsHVcjktlhwTgN6k73yqLLeOOp6e8CrOGTQThOy6ctWadluZ0HSzbKM3RSQCQb2NV2omhqAPwxaQAYSLbHRvwUa4WFQYTdeXBE7Z5xbZ5AoHABwwi7SGVsbG8gV29ybGSALQ0AHQ0wMBcbDAAZF/kXDiAfpAASDXSYEBC7ry4Igg1wsKIIMJuiGBBP+6sfLgiIMJuvLgiSJBVW8E+GHtRNDUAfhi0gAwkW2Ojfgo1wsKgwm68uCJ2zziWds8MDDI+EIBzH8BygDJ7VQKCQA+cCHXScIflTAg1wsf3gKSW3/gAcAAAddJwSGwkX/gcAACbXnYlh0=");let t=r.beginCell();t.storeRef(e),t.storeUint(0,1);const s=t.endCell();return{code:o,data:s}}const C={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"},137:{message:"Masterchain support is not enabled for this contract"}};class l{constructor(e,t){this.abi={errors:C},this.address=e,this.init=t}static async init(){return await d()}static async fromInit(){const e=await d(),t=r.contractAddress(0,e);return new l(t,e)}static fromAddress(e){return new l(e)}async send(e,t,s,a){let n=null;if(a===null&&(n=new r.Cell),n===null)throw new Error("Invalid message type");await e.internal(t,{...s,body:n})}async getGreeting(e){let t=new r.TupleBuilder;return(await e.get("greeting",t.build())).stack.readString()}}function I(o,e,t){let s;w(o,i,n=>t(2,s=n));let a;return p(i,s={markdown:h,tactCode:f,deploy:async()=>{const n=await b.Blockchain.create(),c=await n.treasury("deployer");return c.getSender(),a=n.openContract(await l.fromInit()),[await a.send(c.getSender(),{value:r.toNano(1)},null)]},messages:{},getters:{greeting:async()=>await a.getGreeting()},prev:g(import.meta.url).prev,next:g(import.meta.url).next},s),[]}class S extends u{constructor(e){super(),m(this,e,I,null,A,{})}}export{S as default};
