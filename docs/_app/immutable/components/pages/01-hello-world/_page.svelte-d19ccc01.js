import{S as A,i as u,s as m,J as p,ad as w}from"../../../chunks/index-a89a8bfe.js";import{d as r,s as c}from"../../../chunks/store-04c80bb0.js";import{d as f}from"../../../chunks/index-e79fdc6e.js";import{g}from"../../../chunks/helpers-07666f35.js";const y=`# Hello World

This is probably the simplest possible Tact program. It will provide callers with the classic output "hello world".

Tact lets you write smart contracts. This code defines a single contract named \`HelloWorld\`. Smart contracts must be deployed on-chain to be usable, try to deploy this contract by pressing the <span class="mdButton blue">Deploy</span> button.

## A simple interaction

Contracts can have _getters_ like \`greeting()\`. These are special functions that allow users to query information from the contract. Try to call the getter by pressing the <span class="mdButton teal">Get greeting</span> button.
`,b=`contract HelloWorld {

    get fun greeting(): String {
        return "Hello World";
    }
    
}`;async function d(){const o=r.Cell.fromBase64("te6ccgEBCQEA8QABFP8A9KQT9LzyyAsBAgFiAgMCdtAB0NMDAXGwwAGRf5Fw4gH6QCJQVW8E+GHtRNDUAfhi0gAwkW2Ogts84lnbPDAwyPhCAcx/AcoAye1UBwQCASAFBgA+cCHXScIflTAg1wsf3gKSW3/gAcAAAddJwSGwkX/gcAIrvY1XaiaGoA/DFpABhItsdBbZ5xbZ5AcIAJW93owTgudh6ullc9j0J2HOslQo2zQThO6xqWlbI+WZFp15b++LEcwTgQKuANwDOxymcsHVcjktlhwTgN6k73yqLLeOOp6e8CrOGTQAAm0AHDCLtIZWxsbyBXb3JsZI"),e=r.Cell.fromBase64("te6cckEBCwEA+wABAcABAQWg9hUCART/APSkE/S88sgLAwIBYggEAgEgBgUAlb3ejBOC52Hq6WVz2PQnYc6yVCjbNBOE7rGpaVsj5ZkWnXlv74sRzBOBAq4A3AM7HKZywdVyOS2WHBOA3qTvfKost446np7wKs4ZNAIrvY1XaiaGoA/DFpABhItsdBbZ5xbZ5AoHABwwi7SGVsbG8gV29ybGSAJ20AHQ0wMBcbDAAZF/kXDiAfpAIlBVbwT4Ye1E0NQB+GLSADCRbY6C2zziWds8MDDI+EIBzH8BygDJ7VQKCQA+cCHXScIflTAg1wsf3gKSW3/gAcAAAddJwSGwkX/gcAACbRZYja0=");let t=r.beginCell();t.storeRef(e),t.storeUint(0,1);const s=t.endCell();return{code:o,data:s}}const h={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"}};class l{constructor(e,t){this.abi={errors:h},this.address=e,this.init=t}static async init(){return await d()}static async fromInit(){const e=await d(),t=r.contractAddress(0,e);return new l(t,e)}static fromAddress(e){return new l(e)}async send(e,t,s,a){let n=null;if(a===null&&(n=new r.Cell),n===null)throw new Error("Invalid message type");await e.internal(t,{...s,body:n})}async getGreeting(e){let t=new r.TupleBuilder;return(await e.get("greeting",t.build())).stack.readString()}}function B(o,e,t){let s;p(o,c,n=>t(2,s=n));let a;return w(c,s={markdown:y,tactCode:b,deploy:async()=>{const n=await f.Blockchain.create(),i=await n.treasury("deployer");return i.getSender(),a=n.openContract(await l.fromInit()),[await a.send(i.getSender(),{value:r.toNano(1)},null)]},messages:{},getters:{greeting:async()=>await a.getGreeting()},prev:g(import.meta.url).prev,next:g(import.meta.url).next},s),[]}class T extends A{constructor(e){super(),u(this,e,B,null,m,{})}}export{T as default};
