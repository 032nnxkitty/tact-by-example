var u=Object.defineProperty;var C=(s,e,t)=>e in s?u(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>(C(s,typeof e!="symbol"?e+"":e,t),t);import{S as y,i as I,s as b,J as m,ad as B}from"../../../chunks/index-a89a8bfe.js";import{d as a,s as g}from"../../../chunks/store-04c80bb0.js";import{d as p,g as d}from"../../../chunks/helpers-72d1d48d.js";const f="# Integers\n\nTact supports a number of primitive data types that are tailored for smart contract use.\n\n`Int` is the primary number type. Math in smart contracts is always done with integers and no floating points.\n\nThe runtime type `Int` is *always* 257-bit signed, so all runtime calculations are done at 257-bit. This should be enough for everything as it's large enough to hold the number of atoms in the universe.\n\nWhen encoding `Int` to persistent state, we will usually use smaller representations than 257-bit to reduce storage cost. The persistent state size is specified in every declaration of a state variable after the `as` keyword.",M=`import "@stdlib/deploy";

contract Integers with Deployable {
 
    // integers can be persisted in state in various sizes
    i1: Int as int257 = 3001;   // range -2^256 to 2^256 - 1 (takes 257 bit = 32 bytes + 1 bit)
    i2: Int as uint256;         // range 0 to 2^256 - 1 (takes 256 bit = 32 bytes)
    i3: Int as int256 = 17;     // range -2^255 to 2^255 - 1 (takes 256 bit = 32 bytes)
    i4: Int as uint128;         // range 0 to 2^128 - 1 (takes 128 bit = 16 bytes)
    ///i5: Int as int128;          // range -2^127 to 2^127 - 1 (takes 128 bit = 16 bytes)
    i6: Int as coins;           // range 0 to 2^120 - 1 (takes 120 bit = 15 bytes)
    i7: Int as uint64 = 0x1c4a; // range 0 to 18,446,744,073,709,551,615 (takes 64 bit = 8 bytes)
    i8: Int as int64 = -203;    // range -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 (takes 64 bit = 8 bytes)
    i9: Int as uint32 = 0;      // range 0 to 4,294,967,295 (takes 32 bit = 4 bytes)
    i10: Int as int32 = 0;      // range -2,147,483,648 to 2,147,483,647 (takes 32 bit = 4 bytes)
    i11: Int as uint16 = 0;     // range 0 to 65,535 (takes 16 bit = 2 bytes)
    i12: Int as int16 = 0;      // range -32,768 to 32,767 (takes 16 bit = 2 bytes)
    i13: Int as uint8 = 0;      // range 0 to 255 (takes 8 bit = 1 byte)
    i14: Int as int8 = 0;       // range -128 to 127 (takes 8 bit = 1 byte)

    init() {
        self.i2 = 0x83dfd552e63729b472fcbcc8c45ebcc6691702558b68ec7527e1ba403a0f31a8;
        self.i4 = 1507998500293440234999;
        ///self.i5 = pow(10, 9);   // this is 10^9 = 1,000,000,000
        self.i6 = ton("1.23");  // easy to read coin balances (like cents, just with 9 decimals)
    }

    receive("show all") {
        dump(self.i1);
        dump(self.i2);
        dump(self.i3);
        dump(self.i4);
        ///dump(self.i5);
        dump(self.i6);
        dump(self.i7);
        dump(self.i8);
    }
}`;function E(s){return e=>{let t=e;t.storeUint(2490013878,32),t.storeUint(s.queryId,64)}}async function w(){const s=a.Cell.fromBase64("te6ccgECDwEAA4kAART/APSkE/S88sgLAQIBYgIDAXbQAdDTAwFxsMABkX+RcOIB+kABINdJgQELuvLgiCDXCwoggwm6IYEE/7qx8uCIgwm68uCJIkFVbwT4YQQAuaF3owTgudh6ullc9j0J2HOslQo2zQThO6xqWlbI+WZFp15b++LEcwTgQKuANwDOxymcsHVcjktlhwTgN6k73yqLLeOOp6e8CrOGTQThOy6ctWadluZ0HSzbKM3RSQOe7UTQ1AH4YtIAAY4tgQEB1wDT/9L/03/6ANQB0NM/0j/TH9If0w/SD9MH0gcwEI0QjBCLEIoQiWwdjo4w+CjXCwqDCbry4InbPOJVHNs8MAUGBwCegQu5gBGBHEqB/zVwVHAAUwCC8IPf1VLmNym0cvy8yMRevMZpFwJVi2jsdSfhukA6DzGoCYI4Ub+u5kxkTOX3UJiCEElQT4BHGEUVUEQGAwL07aLt+3Ah10nCH5UwINcLH94Cklt/4CGCEJRqmLa6jqMx0x8BghCUapi2uvLggdM/ATHIAYIQr/kPV1jLH8s/yds8f+ABwACOrfkBgvAyQsxllS8F2bB9Kyyq2RY4o0HI4fJTwjjU3mC5C/1zSrqOhds8f9sx4JEw4nAICQB6yPhCAcx/AcoAVcBQzYEBAc8AGsv/GMr/Fst/UAT6AgLIyz/KPxLLHxLKHxLLDxLKDxLLBxLKB8kBzMntVAEm+EFvJBAjXwN/cFADgEIBbW3bPAoEJizbPP4UMCvbPP4UMCrbPP4UMCkODg4MAc7IcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggwm6IYEE/7qx8uCIgwm68uCJzxZQA/oCcAHKaCNusyVus7GXMzMBcAHKAOMNIW6znH8BygABIG7y0IABzJUxcAHKAOLJAfsACwCYfwHKAMhwAcoAcAHKACRus51/AcoABCBu8tCAUATMljQDcAHKAOIkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDicAHKAAJ/AcoAAslYzAQk2zz+FDAo2zz+FDAn2zz+FDAmDg4ODQEK2zz+FDAOAN7IIcEAmIAtAcsHAaMB3iGCODJ8snNBGdO3qaoduY4gcCBxjhQEeqkMpjAlqBKgBKoHAqQhwABFMOYwM6oCzwGOK28AcI4RI3qpCBJvjAGkA3qpBCDAABTmMyKlA5xTAm+BpjBYywcCpVnkMDHiydA="),e=a.Cell.fromBase64("te6cckECEQEAA5MAAQHAAQEFoB6tAgEU/wD0pBP0vPLICwMCAWIFBAC5oXejBOC52Hq6WVz2PQnYc6yVCjbNBOE7rGpaVsj5ZkWnXlv74sRzBOBAq4A3AM7HKZywdVyOS2WHBOA3qTvfKost446np7wKs4ZNBOE7Lpy1Zp2W5nQdLNsozdFJAXbQAdDTAwFxsMABkX+RcOIB+kABINdJgQELuvLgiCDXCwoggwm6IYEE/7qx8uCIgwm68uCJIkFVbwT4YQYDnu1E0NQB+GLSAAGOLYEBAdcA0//S/9N/+gDUAdDTP9I/0x/SH9MP0g/TB9IHMBCNEIwQixCKEIlsHY6OMPgo1wsKgwm68uCJ2zziVRzbPDAQCAcAesj4QgHMfwHKAFXAUM2BAQHPABrL/xjK/xbLf1AE+gICyMs/yj8Syx8Syh8Syw8Syg8SywcSygfJAczJ7VQC9O2i7ftwIddJwh+VMCDXCx/eApJbf+AhghCUapi2uo6jMdMfAYIQlGqYtrry4IHTPwExyAGCEK/5D1dYyx/LP8nbPH/gAcAAjq35AYLwMkLMZZUvBdmwfSssqtkWOKNByOHyU8I41N5guQv9c0q6joXbPH/bMeCRMOJwDQkEJizbPP4UMCvbPP4UMCrbPP4UMCkMDAwKBCTbPP4UMCjbPP4UMCfbPP4UMCYMDAwLAQrbPP4UMAwA3sghwQCYgC0BywcBowHeIYI4Mnyyc0EZ07epqh25jiBwIHGOFAR6qQymMCWoEqAEqgcCpCHAAEUw5jAzqgLPAY4rbwBwjhEjeqkIEm+MAaQDeqkEIMAAFOYzIqUDnFMCb4GmMFjLBwKlWeQwMeLJ0AEm+EFvJBAjXwN/cFADgEIBbW3bPA4BzshxAcoBUAcBygBwAcoCUAUg10mBAQu68uCIINcLCiCDCbohgQT/urHy4IiDCbry4InPFlAD+gJwAcpoI26zJW6zsZczMwFwAcoA4w0hbrOcfwHKAAEgbvLQgAHMlTFwAcoA4skB+wAPAJh/AcoAyHABygBwAcoAJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4iRus51/AcoABCBu8tCAUATMljQDcAHKAOJwAcoAAn8BygACyVjMAJ6BC7mAEYEcSoH/NXBUcABTAILwg9/VUuY3KbRy/LzIxF68xmkXAlWLaOx1J+G6QDoPMagJgjhRv67mTGRM5fdQmIIQSVBPgEcYRRVQRAYDCaluig==");let t=a.beginCell();t.storeRef(e),t.storeUint(0,1);const i=t.endCell();return{code:s,data:i}}const Q={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"},137:{message:"Masterchain support is not enabled for this contract"}};class c{constructor(e,t){r(this,"address");r(this,"init");r(this,"abi",{errors:Q});this.address=e,this.init=t}static async init(){return await w()}static async fromInit(){const e=await w(),t=a.contractAddress(0,e);return new c(t,e)}static fromAddress(e){return new c(e)}async send(e,t,i,n){let o=null;if(n==="show all"&&(o=a.beginCell().storeUint(0,32).storeStringTail(n).endCell()),n&&typeof n=="object"&&!(n instanceof a.Slice)&&n.$$type==="Deploy"&&(o=a.beginCell().store(E(n)).endCell()),o===null)throw new Error("Invalid message type");await e.internal(t,{...i,body:o})}}function h(s,e,t){let i;m(s,g,A=>t(2,i=A));let n,o;return B(g,i={markdown:f,tactCode:M,deploy:async()=>{const A=await p.Blockchain.create(),l=await A.treasury("deployer");return n=l.getSender(),o=A.openContract(await c.fromInit()),[await o.send(l.getSender(),{value:a.toNano(1)},{$$type:"Deploy",queryId:0n})]},messages:{"show all":async()=>[await o.send(n,{value:a.toNano(1)},"show all")]},getters:{},prev:d(import.meta.url).prev,next:d(import.meta.url).next},i),[]}class x extends y{constructor(e){super(),I(this,e,h,null,b,{})}}export{x as default};
