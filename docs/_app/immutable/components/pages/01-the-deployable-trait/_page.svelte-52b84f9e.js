var u=Object.defineProperty;var m=(s,e,t)=>e in s?u(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var l=(s,e,t)=>(m(s,typeof e!="symbol"?e+"":e,t),t);import{S as p,i as f,s as w,J as B,ad as I}from"../../../chunks/index-a89a8bfe.js";import{d as r,s as g}from"../../../chunks/store-04c80bb0.js";import{d as h}from"../../../chunks/index-e79fdc6e.js";import{g as d}from"../../../chunks/helpers-07666f35.js";const C="# The Deployable Trait\n\nTact doesn't support classical class inheritance, but contracts can implement _traits_. One of the commonly used traits is `Deployable`. It implements a useful receiver for a `Deploy` message which helps deploy contracts in a unified way.\n\nAll contracts are deployed by sending them a message. This can be any message, but best practice is to designate a special `Deploy` message to make this explicit.\n\nThis message has a single field, `queryId`, which is provided by the deployer. If the deploy succeeds, the contract will reply with the message `DeployOk` and echo the same `queryId` in the response.\n\nIf you're using TypeScript to deploy, sending the deploy message should look something like:\n\n```ts\nconst msg = { $$type: \"Deploy\", queryId: 0n };\nawait contract.send(sender, { value: toNano(1) }, msg);\n```\n",b=`// this trait has to be imported
import "@stdlib/deploy";

// the Deployable trait adds a default receiver for the "Deploy" message
contract Counter with Deployable {
 
    val: Int as uint32;
 
    init() {
        self.val = 0;
    }
 
    receive("increment") {
        self.val = self.val + 1;
    }
 
    get fun value(): Int {
        return self.val;
    }
}`;function v(s){return e=>{let t=e;t.storeUint(2490013878,32),t.storeUint(s.queryId,64)}}async function y(){const s=r.Cell.fromBase64("te6ccgECCwEAAfEAART/APSkE/S88sgLAQIBYgIDAoTQAdDTAwFxsMABkX+RcOIB+kAiUFVvBPhh7UTQ1AH4YtIAAZTTHwExjoMw2zziWds8MMj4QgHMfwHKAAEByx/J7VQKBAIBWAgJAfDtou37cCHXScIflTAg1wsf3gKSW3/gIYIQlGqYtrqOozHTHwGCEJRqmLa68uCB0z8BMcgBghCv+Q9XWMsfyz/J2zx/4AHAAI4r+QGC8MT41yMS7f3vW3vseDO9uxYtFRG9eKkSrtDyY3r2VXKuupSkf9sx4JEw4nAFASb4QW8kECNfA39wUAOAQgFtbds8BgH2yHEBygFQBwHKAHABygJQBc8WUAP6AnABymgjbrMlbrOxjkx/AcoAyHABygBwAcoAJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4iRus51/AcoABCBu8tCAUATMljQDcAHKAOJwAcoAAn8BygACyVjMlzMzAXABygDiIW6zBwAwnH8BygABIG7y0IABzJUxcAHKAOLJAfsAAJW7vRgnBc7D1dLK57HoTsOdZKhRtmgnCd1jUtK2R8syLTry398WI5gnAgVcAbgGdjlM5YOq5HJbLDgnAb1J3vlUWW8cdT094FWcMmgBL7msDtRNDUAfhi0gABlNMfATGOgzDbPOKAoAAnA="),e=r.Cell.fromBase64("te6cckECDQEAAfsAAQHAAQEFoendAgEU/wD0pBP0vPLICwMCAWIHBAIBWAYFAS+5rA7UTQ1AH4YtIAAZTTHwExjoMw2zzigMAJW7vRgnBc7D1dLK57HoTsOdZKhRtmgnCd1jUtK2R8syLTry398WI5gnAgVcAbgGdjlM5YOq5HJbLDgnAb1J3vlUWW8cdT094FWcMmgChNAB0NMDAXGwwAGRf5Fw4gH6QCJQVW8E+GHtRNDUAfhi0gABlNMfATGOgzDbPOJZ2zwwyPhCAcx/AcoAAQHLH8ntVAwIAfDtou37cCHXScIflTAg1wsf3gKSW3/gIYIQlGqYtrqOozHTHwGCEJRqmLa68uCB0z8BMcgBghCv+Q9XWMsfyz/J2zx/4AHAAI4r+QGC8MT41yMS7f3vW3vseDO9uxYtFRG9eKkSrtDyY3r2VXKuupSkf9sx4JEw4nAJASb4QW8kECNfA39wUAOAQgFtbds8CgH2yHEBygFQBwHKAHABygJQBc8WUAP6AnABymgjbrMlbrOxjkx/AcoAyHABygBwAcoAJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4iRus51/AcoABCBu8tCAUATMljQDcAHKAOJwAcoAAn8BygACyVjMlzMzAXABygDiIW6zCwAwnH8BygABIG7y0IABzJUxcAHKAOLJAfsAAAJwyrXsNg==");let t=r.beginCell();t.storeRef(e),t.storeUint(0,1);const o=t.endCell();return{code:s,data:o}}const H={2:{message:"Stack undeflow"},3:{message:"Stack overflow"},4:{message:"Integer overflow"},5:{message:"Integer out of expected range"},6:{message:"Invalid opcode"},7:{message:"Type check error"},8:{message:"Cell overflow"},9:{message:"Cell underflow"},10:{message:"Dictionary error"},13:{message:"Out of gas error"},32:{message:"Method ID not found"},34:{message:"Action is invalid or not supported"},37:{message:"Not enough TON"},38:{message:"Not enough extra-currencies"},128:{message:"Null reference exception"},129:{message:"Invalid serialization prefix"},130:{message:"Invalid incoming message"},131:{message:"Constraints error"},132:{message:"Access denied"},133:{message:"Contract stopped"},134:{message:"Invalid argument"},135:{message:"Code of a contract was not found"},136:{message:"Invalid address"}};class A{constructor(e,t){l(this,"address");l(this,"init");l(this,"abi",{errors:H});this.address=e,this.init=t}static async init(){return await y()}static async fromInit(){const e=await y(),t=r.contractAddress(0,e);return new A(t,e)}static fromAddress(e){return new A(e)}async send(e,t,o,n){let a=null;if(n==="increment"&&(a=r.beginCell().storeUint(0,32).storeStringTail(n).endCell()),n&&typeof n=="object"&&!(n instanceof r.Slice)&&n.$$type==="Deploy"&&(a=r.beginCell().store(v(n)).endCell()),a===null)throw new Error("Invalid message type");await e.internal(t,{...o,body:a})}async getValue(e){let t=new r.TupleBuilder;return(await e.get("value",t.build())).stack.readBigNumber()}}function D(s,e,t){let o;B(s,g,i=>t(2,o=i));let n,a;return I(g,o={markdown:C,tactCode:b,deploy:async()=>{const i=await h.Blockchain.create(),c=await i.treasury("deployer");return n=c.getSender(),a=i.openContract(await A.fromInit()),[await a.send(c.getSender(),{value:r.toNano(1)},{$$type:"Deploy",queryId:0n})]},messages:{increment:async()=>[await a.send(n,{value:r.toNano(1)},"increment")]},getters:{value:async()=>await a.getValue()},prev:d(import.meta.url).prev,next:d(import.meta.url).next},o),[]}class x extends p{constructor(e){super(),f(this,e,D,null,w,{})}}export{x as default};
